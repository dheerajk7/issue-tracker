[{"/home/dheeraj/Documents/Project/issue-tracker/src/index.js":"1","/home/dheeraj/Documents/Project/issue-tracker/src/components/App.js":"2","/home/dheeraj/Documents/Project/issue-tracker/src/components/Navbar.js":"3","/home/dheeraj/Documents/Project/issue-tracker/src/components/index.js":"4","/home/dheeraj/Documents/Project/issue-tracker/src/components/CreateProject.js":"5","/home/dheeraj/Documents/Project/issue-tracker/src/components/Home.js":"6","/home/dheeraj/Documents/Project/issue-tracker/src/components/CreateIssue.js":"7","/home/dheeraj/Documents/Project/issue-tracker/src/components/ProjectDetail.js":"8","/home/dheeraj/Documents/Project/issue-tracker/src/services/index.js":"9","/home/dheeraj/Documents/Project/issue-tracker/src/helpers/urls.js":"10","/home/dheeraj/Documents/Project/issue-tracker/src/helpers/index.js":"11"},{"size":208,"mtime":1611660031995,"results":"12","hashOfConfig":"13"},{"size":692,"mtime":1611669832940,"results":"14","hashOfConfig":"13"},{"size":1093,"mtime":1612101883060,"results":"15","hashOfConfig":"13"},{"size":258,"mtime":1611660951610,"results":"16","hashOfConfig":"13"},{"size":2540,"mtime":1612101865428,"results":"17","hashOfConfig":"13"},{"size":783,"mtime":1611672773359,"results":"18","hashOfConfig":"13"},{"size":3254,"mtime":1612101834819,"results":"19","hashOfConfig":"13"},{"size":2908,"mtime":1612101789063,"results":"20","hashOfConfig":"13"},{"size":1205,"mtime":1611678074272,"results":"21","hashOfConfig":"13"},{"size":455,"mtime":1611678024951,"results":"22","hashOfConfig":"13"},{"size":180,"mtime":1611672501088,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"abzyvs",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/dheeraj/Documents/Project/issue-tracker/src/index.js",[],["52","53"],"/home/dheeraj/Documents/Project/issue-tracker/src/components/App.js",[],"/home/dheeraj/Documents/Project/issue-tracker/src/components/Navbar.js",[],"/home/dheeraj/Documents/Project/issue-tracker/src/components/index.js",[],"/home/dheeraj/Documents/Project/issue-tracker/src/components/CreateProject.js",["54"],"import React, { Component, createRef } from \"react\";\nimport { showMessage } from \"../helpers\";\nimport { createNewProject } from \"../services\";\n\nclass CreateProject extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      description: \"\",\n      author: \"\",\n    };\n    this.formRef = createRef();\n  }\n\n  // handle input form change and saving them in state\n  handleChange = (input, value) => {\n    if (input === \"title\") {\n      this.setState({ title: value });\n    } else if (input === \"description\") {\n      this.setState({ description: value });\n    } else if (input === \"author\") {\n      this.setState({ author: value });\n    }\n  };\n\n  // handle form submission for creating new product\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title, description, author } = this.state;\n    if (title.length === 0 || description.length === 0 || author.length === 0) {\n      showMessage(\"warning\", \"Missing Field\", \"Please Enter All Fields\");\n      return;\n    }\n    const response = createNewProject({ name: title, description, author });\n    showMessage(\"success\", \"Successfull\", \"Project Created Successfully\");\n    this.formRef.current.reset();\n  };\n\n  render() {\n    return (\n      <div className=\"create-project-container\">\n        <div className=\"heading\">Creat Project</div>\n        <form ref={this.formRef}>\n          <div className=\"input-container\">\n            <label>Name</label>\n            <input\n              type=\"text\"\n              required={true}\n              placeholder=\"Title\"\n              onChange={(event) => {\n                this.handleChange(\"title\", event.target.value);\n              }}\n            />\n          </div>\n          <div className=\"input-container\">\n            <label>Description</label>\n            <input\n              type=\"text\"\n              required={true}\n              placeholder=\"Description\"\n              onChange={(event) => {\n                this.handleChange(\"description\", event.target.value);\n              }}\n            />\n          </div>\n          <div className=\"input-container\">\n            <label>Author</label>\n            <input\n              type=\"text\"\n              required={true}\n              placeholder=\"Author\"\n              onChange={(event) => {\n                this.handleChange(\"author\", event.target.value);\n              }}\n            />\n          </div>\n          <button onClick={this.handleSubmit}>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CreateProject;\n","/home/dheeraj/Documents/Project/issue-tracker/src/components/Home.js",["55"],"import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { fetchProject } from \"../services\";\nimport \"../styles/Home.scss\";\n\nexport default function Home() {\n  const [projectList, setProjectList] = useState([]);\n\n  useEffect(async () => {\n    const response = await fetchProject();\n    setProjectList(response.reverse());\n  }, []);\n\n  console.log(projectList, \"list\");\n  return (\n    <div className=\"home-container\">\n      <ul className=\"project-list\">\n        <div className=\"project-heading\">Projects</div>\n        {projectList.map((project) => {\n          return (\n            <li key={project.id}>\n              <Link to={\"/project/\" + project.id}>{project.name}</Link>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","/home/dheeraj/Documents/Project/issue-tracker/src/components/CreateIssue.js",["56"],"import React, { Component, createRef } from \"react\";\nimport \"../styles/CreateIssue.scss\";\nimport { showMessage } from \"../helpers\";\nimport { createNewIssue } from \"../services\";\n\nclass CreateIssue extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      description: \"\",\n      label: \"\",\n      author: \"\",\n    };\n    this.formRef = createRef();\n  }\n\n  // handle input form change and saving them in state\n  handleChange = (input, value) => {\n    if (input === \"title\") {\n      this.setState({ title: value });\n    } else if (input === \"description\") {\n      this.setState({ description: value });\n    } else if (input === \"label\") {\n      this.setState({ label: value });\n    } else if (input === \"author\") {\n      this.setState({ author: value });\n    }\n  };\n\n  // handle form submission for creating new product\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    const { title, description, label, author } = this.state;\n    // checking if any field in form is empty\n    // showing alert if any field is empty\n    if (\n      title.length === 0 ||\n      description.length === 0 ||\n      label.length === 0 ||\n      author.length === 0\n    ) {\n      showMessage(\"warning\", \"Missing Field\", \"Please Enter All Fields\");\n      return;\n    }\n    const response = await createNewIssue(this.props.match.params.projectId, {\n      title,\n      description,\n      author,\n      label: label.split(\",\"),\n      number: Date.now() % 1000,\n    });\n    this.formRef.current.reset();\n  };\n\n  // rendering add product component\n  render() {\n    return (\n      <div className=\"create-project-container\">\n        <div className=\"heading\">Creat Issue</div>\n        <form ref={this.formRef}>\n          <div className=\"input-container\">\n            <label>Title</label>\n            <input\n              type=\"text\"\n              required={true}\n              placeholder=\"Title\"\n              onChange={(event) => {\n                this.handleChange(\"title\", event.target.value);\n              }}\n            />\n          </div>\n          <div className=\"input-container\">\n            <label>Description</label>\n            <input\n              type=\"text\"\n              required={true}\n              placeholder=\"Description\"\n              onChange={(event) => {\n                this.handleChange(\"description\", event.target.value);\n              }}\n            />\n          </div>\n          <div className=\"input-container\">\n            <label>Labels (Comma Separated)</label>\n            <input\n              type=\"text\"\n              required={true}\n              placeholder=\"Labels\"\n              onChange={(event) => {\n                this.handleChange(\"label\", event.target.value);\n              }}\n            />\n          </div>\n          <div className=\"input-container\">\n            <label>Author</label>\n            <input\n              type=\"text\"\n              required={true}\n              placeholder=\"Author\"\n              onChange={(event) => {\n                this.handleChange(\"author\", event.target.value);\n              }}\n            />\n          </div>\n          <button onClick={this.handleSubmit}>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CreateIssue;\n","/home/dheeraj/Documents/Project/issue-tracker/src/components/ProjectDetail.js",["57","58","59"],"import { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { fetchProjectDetail, fetchIssueList } from \"../services\";\nimport \"../styles/Home.scss\";\n\nexport default function ProjectDetail(props) {\n  const [projectDetail, setProjectDetail] = useState({\n    project: {},\n    issueList: [],\n  });\n\n  const [updatedIssueList, setUpdatedList] = useState([]);\n  const [isSorted, setIsSorted] = useState(false);\n\n  useEffect(() => {\n    if (isSorted) {\n      let sortedList = [...issueList].sort((a, b) => {\n        return a.number - b.number;\n      });\n      setUpdatedList(sortedList);\n    } else {\n      setUpdatedList(issueList);\n    }\n  }, [isSorted]);\n\n  useEffect(async () => {\n    const id = props.match.params.id;\n    const projectDetail = await fetchProjectDetail(id);\n    const issueList = await fetchIssueList(id);\n    setProjectDetail({\n      project: projectDetail,\n      issueList: issueList,\n    });\n    setUpdatedList(issueList);\n  }, []);\n\n  const { issueList, project } = projectDetail;\n  return (\n    <div className=\"project-detail-container\">\n      <div className=\"project-detail\">\n        <div className=\"project-title-container\">\n          <span>Project Title</span>\n          <span>{project.name}</span>\n        </div>\n        <div className=\"project-title-container\">\n          <span>Author</span>\n          <span>{project.author}</span>\n        </div>\n        <div className=\"description-container\">\n          <span className=\"heading\">Description</span>\n          <span>{project.description}</span>\n        </div>\n        <div className=\"button-container\">\n          <Link to={`/create-new-issue/${project.id}`}>Create New Issue</Link>\n        </div>\n      </div>\n      <ul className=\"project-list\">\n        <div className=\"project-heading\">\n          <span>Project Issues</span>\n          <button\n            onClick={() => {\n              setIsSorted(!isSorted);\n            }}\n          >\n            {isSorted ? \"Cancle Sorting\" : \"Sort By Number\"}\n          </button>\n        </div>\n        {updatedIssueList.length > 0 && (\n          <div className=\"table-header\">\n            <span>Number</span>\n            <span>Title</span>\n            <span>Author</span>\n          </div>\n        )}\n        {updatedIssueList.map((issue) => {\n          return (\n            <li key={issue.id} className=\"issue-list\">\n              <Link to={\"/project/\" + issue.id}>\n                <div className=\"title-container\">\n                  <span>{issue.number}</span>\n                  <span>{issue.title}</span>\n                  <span>{issue.author}</span>\n                </div>\n              </Link>\n              <div className=\"description-container\">\n                <span className=\"description\"> Description</span>\n                <span>{issue.description}</span>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","/home/dheeraj/Documents/Project/issue-tracker/src/services/index.js",[],"/home/dheeraj/Documents/Project/issue-tracker/src/helpers/urls.js",["60"],"const API_ROOT = \"https://60100e2f6c21e1001704fcc9.mockapi.io\";\n\nconst getProject = () => `${API_ROOT}/project`;\nconst getProjectDetail = (id) => `${API_ROOT}/project/${id}`;\nconst getIssueList = (id) => `${API_ROOT}/project/${id}/issue`;\nconst createProject = () => `${API_ROOT}/project`;\nconst createIssue = (id) => `${API_ROOT}/project/${id}/issue`;\nexport default {\n  getProject,\n  getProjectDetail,\n  getIssueList,\n  createProject,\n  createIssue,\n};\n","/home/dheeraj/Documents/Project/issue-tracker/src/helpers/index.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":35,"column":11,"nodeType":"67","messageId":"68","endLine":35,"endColumn":19},{"ruleId":"69","severity":1,"message":"70","line":9,"column":13,"nodeType":"71","endLine":12,"endColumn":4},{"ruleId":"65","severity":1,"message":"66","line":46,"column":11,"nodeType":"67","messageId":"68","endLine":46,"endColumn":19},{"ruleId":"69","severity":1,"message":"72","line":24,"column":6,"nodeType":"73","endLine":24,"endColumn":16,"suggestions":"74"},{"ruleId":"69","severity":1,"message":"70","line":26,"column":13,"nodeType":"71","endLine":35,"endColumn":4},{"ruleId":"69","severity":1,"message":"75","line":35,"column":6,"nodeType":"73","endLine":35,"endColumn":8,"suggestions":"76"},{"ruleId":"77","severity":1,"message":"78","line":8,"column":1,"nodeType":"79","endLine":14,"endColumn":3},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'issueList'. Either include it or remove the dependency array.","ArrayExpression",["82"],"React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.",["83"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [isSorted, issueList]",{"range":"88","text":"89"},"Update the dependencies array to be: [props.match.params.id]",{"range":"90","text":"91"},[671,681],"[isSorted, issueList]",[978,980],"[props.match.params.id]"]